{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEgDC,EAAA,CAC9CC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,kBACnCE,UAAWH,SAASC,cAAc,iBAClCG,OAAQJ,SAASC,cAAc,oBAJzBI,EAAwCP,EAAxCC,KAAMO,EAAkCR,EAAlCI,WAAYK,EAAsBT,EAAtBK,UAAWK,EAAWV,EAAXM,OAgCrC,SAASK,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,GACFI,EAAQ,CAAEN,WAAUC,UAGtBM,EAAO,CAAEP,WAAUC,YAClBA,MAnCPN,EAAKc,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBAIN,IAAIC,EAAgBC,OAAOjB,EAAWkB,OAChCC,EAAeF,OAAOhB,EAAUiB,OACtCE,QAAQC,IAAIF,GACZC,QAAQC,IAAIL,GAEZ,IAAK,IAAIM,EAAQ,EAAGA,GAASpB,EAAOgB,MAAOI,IACzCF,QAAQC,IAAIC,GACZnB,EAAcmB,EAAON,GAClBO,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjBf,EAAAmC,OAAOC,QAAQ,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,UAE9DuB,OAAM,SAAAJ,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAClBf,EAAAmC,OAAOI,QAAQ,sBAAqCF,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,UAE9DW,GAAiBG,EAEnBpB,EAAK+B,W","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst { form, firstDelay, delayStep, amount } = {\n  form: document.querySelector('.form'),\n  firstDelay: document.querySelector('[name=\"delay\"]'),\n  delayStep: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n};\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n\n  // const for get value\n\n  let getDelayValue = Number(firstDelay.value);\n  const getStepValue = Number(delayStep.value);\n  console.log(getStepValue);\n  console.log(getDelayValue);\n\n  for (let index = 1; index <= amount.value; index++) {\n    console.log(index);\n    createPromise(index, getDelayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    getDelayValue += getStepValue;\n  }\n  form.reset();\n});\n\n// functions //\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n\n      reject({ position, delay });\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$ref","form","document","querySelector","firstDelay","delayStep","amount","$ce04d3a99e08e73b$var$form","$ce04d3a99e08e73b$var$firstDelay","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","getDelayValue","Number","value","getStepValue","console","log","index","then","param","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.99676baa.js.map"}