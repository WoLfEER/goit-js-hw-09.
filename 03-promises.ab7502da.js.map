{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEgDC,EAAA,CAC9CC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,kBACnCE,UAAWH,SAASC,cAAc,iBAClCG,OAAQJ,SAASC,cAAc,oBAJzBI,EAAwCP,EAAxCC,KAAMO,EAAkCR,EAAlCI,WAAYK,EAAsBT,EAAtBK,UAAWK,EAAWV,EAAXM,OA6BrC,SAASK,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,GACFI,EAAQ,CAAEN,WAAUC,UAGtBM,EAAO,CAAEP,WAAUC,YAClBA,MAhCPQ,QAAQC,IAAIf,EAAMC,EAAYC,EAAWC,GACzCW,QAAQC,IAAId,EAAWe,OAEvBhB,EAAKiB,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBAKN,IAHA,IAAIC,EAAkBnB,EAAWe,MAC3BK,EAAiBnB,EAAUc,MAExBM,EAAQ,EAAGA,GAASnB,EAAOa,MAAOM,IACzClB,EAAckB,EAAOF,GAClBG,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBf,EAAAkC,OAAOC,QAAQ,qBAAoCC,OAAftB,EAAS,QAAYsB,OAANrB,OAEpDsB,OAAM,SAAAJ,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBf,EAAAkC,OAAOI,QAAQ,oBAAmCF,OAAftB,EAAS,QAAYsB,OAANrB,OAGtDc,GAAmBC,K","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst { form, firstDelay, delayStep, amount } = {\n  form: document.querySelector('.form'),\n  firstDelay: document.querySelector('[name=\"delay\"]'),\n  delayStep: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n};\n\nconsole.log(form, firstDelay, delayStep, amount);\nconsole.log(firstDelay.value);\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n\n  let firstDelayValue = firstDelay.value;\n  const delayStepValue = delayStep.value;\n\n  for (let index = 1; index <= amount.value; index++) {\n    createPromise(index, firstDelayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}`);\n      });\n\n    firstDelayValue += delayStepValue;\n  }\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n\n      reject({ position, delay });\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$ref","form","document","querySelector","firstDelay","delayStep","amount","$ce04d3a99e08e73b$var$form","$ce04d3a99e08e73b$var$firstDelay","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","console","log","value","addEventListener","event","preventDefault","firstDelayValue","delayStepValue","index","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.ab7502da.js.map"}